###   FONCTIONS UTILISABLES
#   clean_exit
#   warn
#   crit
#   term
#   simple
#   log_off
#   log_on
#   read_carac

###   NOMS FONCTIONS RESERVES
#   _pause
#   _echo_failure
#   _test_nb_args
#   _start
#   _end
#   _stop

###     FONCTIONS UTILISABLES
##  fonction                               affichage              resultat
###############################################################################
##  menu "yes" "Question ?"                Question ? [O/n]       $MENU_RESULT
##  menu "no" "Question ?"                 Question ? [o/N]
##
##  menu "list" "Question ?" "c1 c2 c3"    Question ?             $MENU_RESULT
##                                         1) c1
##                                         2) c2
##                                         3) c3
##                                         4) QUITTER
##
##  menu "ls" "Question ?" "/chemin"       Question ?             $MENU_RESULT
##                                         1) destination1
##                                         2) destination2
##                                         3) QUITTER
##
##
##  test_host "vm-x1 vm-x2"                OK si hostname
##                                          = vm-x1 ou vm-x2
##
##
##  test_os                                                       $OS
##
##  clean_exit_force                       Demande si on veux
##                                          supprimer la log
##  clean_exit_force "yes"                 Supprime la log
##  clean_exit_force "no"                  Garde la log
##
##  read_carac 
##  
###  FONCTIONS D'ENCAPSULATION DE CODE AVEC TEST DE CODE DE RETOUR ET ACTION SI ERREUR
##
##  simple "text"                          Affiche du texte pour info
## 
##  Les fonctions suivantes affiches le texte puis comportement suivant code de retour
##  FONCTION exemple                       COMPORTEMENT
#################################################################################
##  warn "texte "code"                     signale l'echec puis continue normalement
##
##  term "texte" "code"                    arrete le scripte si erreur
##
##  crit "texte "code"                     offre la possibilite de consulter la log et d'arreter ou continuer l'execution du script
##
##
##


###   Variables modifiables
PAUSE=1         # valeur en seconde de la pause effectuee a chaque appelle des fonctions d'affichage
LOG_FILE="/tmp/log_escript_$$.log"   # chemin du fichier de log

###     Interception des interruptions de sortie du script

trap 'PAUSE=0; _stop "\n\n#########   -> Demande d arret interceptee <-   #########" '  INT QUIT

###   VARIABLES RESERVEES
OPTIONS=$*
REP_SCR=$(dirname $0)
FILE_SCR=$(basename $0)




###     VARIABLES COULEURS

RES_COL="60"
MOVE_TO_COL="\\033[${RES_COL}G"
SETCOLOR_NORMAL="\\033[0;39m"

SETCOLOR_SUCCESS="\\033[0;32m""   OK   ""\\033[0;39m"
  SETCOLOR_START="\\033[0;36m""EN COURS""\\033[0;39m"
   SETCOLOR_INFO="\\033[0;36m""  INFO  ""\\033[0;39m"
SETCOLOR_FAILURE="\\033[0;31m"" ECHOUE ""\\033[0;39m"
   SETCOLOR_STOP="\\033[0;31m""  STOP  ""\\033[0;39m"
SETCOLOR_WARNING="\\033[0;33m""  WARN  ""\\033[0;39m"
  SETCOLOR_QUEST="\\033[0;35m""QUESTION""\\033[0;39m"


###     Ecriture des log dans un fichier

log_on() { exec 3>&1 4>&2 1>>${LOG_FILE} 2>&1 ; }
log_off() { exec 1>&3 2>&4  ; }

###    initialisation commande echo pour futur compatibilite AIX (ksh)
case "$(uname)" in
#        "AIX" ) ECHO="echo ";;
        "Linux" ) ECHO="echo -ne ";;
        * ) ECHO="echo -e " ; _stop "Bibliotheque non prevue pour cet OS" ; exit 1 ;;
esac


###   DECLARATION DES FONCTIONS EXTERNES

menu() {
  log_off
  if [ "$1" == "yes" ] || [ "$1" == "no" ]; then
    _test_nb_args "2" "$@"
    while
    if [ "$1" == "yes" ]; then
      $ECHO "${2} [O/n]${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
    elif [ "$1" == "no" ]; then
      $ECHO "${2} [o/N]${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
    fi
    read CHOIX
    do
      case $CHOIX in
        [yYoO0]*) MENU_RESULT="yes"; break;;
        [nN]*) MENU_RESULT="no"; break;;
        *) if [ -z $CHOIX ]; then
             MENU_RESULT="$1"
             break
           else
             echo -e "\n!! Choix incorrecte"
           fi;;
      esac
    done
  elif [ "$1" == "quest" ]; then
    _test_nb_args "2" "$@"
    $ECHO "${2} ${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
    read MENU_RESULT
  elif [ "$1" == "list" ]; then
    _test_nb_args "3" "$@"
    $ECHO "${2}${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
    LIST="$3"
    select CHOIX in $(for i in ${LIST[*]}; do echo ${i%/*} ; done) QUITTER; do
      if [ -z $CHOIX ]; then
        continue
      elif [ "$CHOIX" == "QUITTER" ]; then
        _stop
      fi
      MENU_RESULT="$CHOIX"
      break
    done
  elif [ "$1" == "ls" ]; then
    _test_nb_args "3" "$@"
    $ECHO "${2}${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
    select CHOIX in $(for i in $(ls -1 $3); do echo ${i%/*} ; done) QUITTER; do
      if [ -z $CHOIX ]; then
        continue
      elif [ "$CHOIX" == "QUITTER" ]; then
        _stop
      fi
      MENU_RESULT="$CHOIX"
      break
    done
  fi
  log_on
}



test_host() {
  _test_nb_args "1" "$@"
  LIST="$1"

  for i in ${LIST[*]}; do
    if [ "$i" == "$(hostname -s)" ]; then
      TEST_HOST="true"
    fi
  done

  term "Test du nom machine" '[ $TEST_HOST == true ]'
}




clean_exit_force() {
  if [ ! -z $1 ]; then
    _test_nb_args "1" "$@"
    CLEAR_LOG="$1"
  else
    menu "no" "Voulez-vous detruire le fichier :\n\t$LOG_FILE"
    CLEAR_LOG=$MENU_RESULT
  fi

  log_off

  if [ "$CLEAR_LOG" == "yes" ]; then
    echo "Suppression de $LOG_FILE"
    rm $LOG_FILE
  fi
}



mod_root() {
  simple "Le script doit etre lance en root!"
  if [ "$(id -u)" != "0" ]; then
    clean_exit_force "yes"
    clear
    sudo $REP_SCR/$FILE_SCR $OPTIONS
    exit 1
  else
    simple "Mode root active!"
  fi
}

#   2 args : 1er arg=chaine a afficher, 2ieme arg=code a executer
#   si le code executer renvoie un code erreur alors affichage "warn" mais pas d'arret
function warn {
   _start "$@"
   $ECHO "$2" > "/tmp/_easyscript_$$.tmp"
   source "/tmp/_easyscript_$$.tmp" && _end "${SETCOLOR_SUCCESS}" || _end "${SETCOLOR_WARNING}"

}

#   2 args : 1er arg=chaine a afficher, 2ieme arg=code a executer
#   si le code executer renvoie un code erreur alors affichage "critical" plus choix de comportement
function crit { 
   _start "$@"
   $ECHO "$2" > "/tmp/_easyscript_$$.tmp"
   source "/tmp/_easyscript_$$.tmp" && _end "${SETCOLOR_SUCCESS}"  || _echo_failure "${SETCOLOR_FAILURE}"
}

#   2 args : 1er arg=chaine a afficher, 2ieme arg=code a executer
#   i le code executer renvoie un code erreur alors affichage "critical" et arret immediat
function term {
   _start "$@"
   $ECHO "$2" > "/tmp/_easyscript_$$.tmp"
   source "/tmp/_easyscript_$$.tmp" && _end "${SETCOLOR_SUCCESS}"  || { PAUSE=0 ; _end "${SETCOLOR_FAILURE}" ; clean_exit ; exit 1 ; }
}

function simple {
   _pause
   _test_nb_args "1" "$@"
   log_off
   $ECHO "${1}${MOVE_TO_COL}[ ${SETCOLOR_INFO} ]\n"
   $ECHO "$1\n" >> $LOG_FILE   
   log_on
}

function clean_exit { 
   simple "\nN'oubliez pas de supprimer le fichier :\n\t$LOG_FILE"
} 

function read_carac {
   log_off; echo "$@" >> $LOG_FILE; log_on
   _test_nb_args "3" "$@"
   local chaine="$1"
   local nom_var="$2"
   local caracs="$3"
   while : ; do
      log_off
      echo -en "$1  " ; read "${nom_var}"
      #echo "${!nom_var}" | od -c # pour besoin debug
      log_on
      if [ "$( wc -c <<< ${!nom_var})" = "2" ] &&  grep -q "${!nom_var}" <<< "${caracs}" ; then
         break
      fi
   done
}



###   DECLARATIONS DES FONCTIONS INTERNES

function _pause {
   sleep $PAUSE
}


#   Test le nombre d'args : 1er arg=le nb attenuds, 2ieme arg=la liste des args
#   appel typique : _test_nb_args "2" "$@"
function _test_nb_args {
   local nb=$1 # on recup le nombre d'arg attendus (contenu dans le 1er arg) pour pouvoir le supprimer (shift)
   if [ "$#" -ne "$(($1+1))" ] ; then
      shift;
      log_off
      for i in  "$@" ; do
         $ECHO  "\n\t-> $i"
      done
      _stop "\nErreur interne. Arguments requis $nb, trouve $#"
   fi  
}

function _start {
   _test_nb_args "2" "$@"
   log_off
   $ECHO "${1}${MOVE_TO_COL}[ ${SETCOLOR_START} ]"
   $ECHO "$1\n" >> $LOG_FILE
   log_on
}

function _end {
   _pause
   log_off 
   $ECHO "${MOVE_TO_COL}[ $1 ]\n" 
   log_on
   rm -f "/tmp/_easyscript_$$.tmp"
}

function _echo_failure {
   _end "$1"
   log_off
   while : ; do
      $ECHO "Continuer ? o/n ou t(ail) ou l(ess) pour voir la log :  "
      local res ; read res
      case ${res} in
         [yYoO])
             $ECHO "\n" ; break ;;
         [tT] )
             $ECHO "\n                     LOG FILE\n"
             $ECHO "====================================================\n"
             tail -n 5 "$LOG_FILE"
             $ECHO "====================================================\n";;
         [lL] )
            less "$LOG_FILE";;   
         [nNqQ])
            PAUSE=0
            clean_exit
            exit 1 ;;
      esac
   done
}


function _stop {
   _pause
   log_off
   $ECHO "$1${MOVE_TO_COL}[ ${SETCOLOR_STOP} ]\n\n"
   rm -f "/tmp/_easyscript_$$.tmp"
   clean_exit
   exit 1
}


$ECHO "\n############  $(date)  ############\n" >> "$LOG_FILE"
log_on
simple "\nEcriture de la log dans :\n\t$LOG_FILE"
log_off ; $ECHO "\n" ; log_on
