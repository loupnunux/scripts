###     FONCTIONS UTILISABLES
#  fonction                               affichage              resultat
##############################################################################
#  menu "yes" "Question ?"                Question ? [O/n]       $MENU_RESULT
#  menu "no" "Question ?"                 Question ? [o/N]
#
#  menu "list" "Question ?" "c1 c2 c3"    Question ?             $MENU_RESULT
#                                         1) c1
#                                         2) c2
#                                         3) c3
#                                         4) QUITTER
#
#  menu "ls" "Question ?" "/chemin"       Question ?             $MENU_RESULT
#                                         1) destination1
#                                         2) destination2
#                                         3) QUITTER
#
#
#  test_host "vm-x1 vm-x2"                OK si hostname
#                                          = vm-x1 ou vm-x2
#
#
#  test_os                                                       $OS
#
#  clean_exit_force                       Demande si on veux
#                                          supprimer la log
#  clean_exit_force "yes"                 Supprime la log
#  clean_exit_force "no"                  Garde la log
#
#
#

###     NOMS FONCTIONS RESERVES
#  _bar
#  _test_osfile





######################
###          VARIABLES
OPTIONS=$*
REP_SCR=$(dirname $0)
FILE_SCR=$(basename $0)
OS_LIST=( "antergos" "archlinux" "centos" "debian" "lmde" "manjaro" "redhat" "ubuntu" )
FILE_OSLIST=( "/etc/os-release" "/etc/redhat-release" "/etc/lsb-release" )
LINE_OSID=( "^DISTRIB_ID=" "^NAME=" )


SETCOLOR_QUEST="\\033[0;35m""QUESTION""\\033[0;39m"


######################
###            SOURCES



######################
### FONCTIONS EXTERNES
menu() {
  log_off
  if [ "$1" == "yes" ] || [ "$1" == "no" ]; then
    _test_nb_args "2" "$@"
    while
    if [ "$1" == "yes" ]; then
      $ECHO "${2} [O/n]${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
#      echo -en "$2 [O/n] :"
    elif [ "$1" == "no" ]; then
      $ECHO "${2} [o/N]${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
#      echo -en "$2 [o/N] :"
    fi
    read CHOIX
    do
      case $CHOIX in
        [yYoO0]*) MENU_RESULT="yes"; break;;
        [nN]*) MENU_RESULT="no"; break;;
        *) if [ -z $CHOIX ]; then
             MENU_RESULT="$1"
             break
           else
             echo -e "\n!! Choix incorrecte"
           fi;;
      esac
    done
  elif [ "$1" == "list" ]; then
    _test_nb_args "3" "$@"
      $ECHO "${2}${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
#    echo -e "$2"
    LIST="$3"
    select CHOIX in $(for i in ${LIST[*]}; do echo ${i%/*} ; done) QUITTER; do
      if [ -z $CHOIX ]; then
        continue
      elif [ "$CHOIX" == "QUITTER" ]; then
        _stop
      fi
      MENU_RESULT="$CHOIX"
      break
    done
  elif [ "$1" == "ls" ]; then
    _test_nb_args "3" "$@"
      $ECHO "${2}${MOVE_TO_COL}[ ${SETCOLOR_QUEST} ]\n"
#    echo -e "$2"
    select CHOIX in $(for i in $(ls -1 $3); do echo ${i%/*} ; done) QUITTER; do
      if [ -z $CHOIX ]; then
        continue
      elif [ "$CHOIX" == "QUITTER" ]; then
        _stop
      fi
      MENU_RESULT="$CHOIX"
      break
    done
  fi
  log_on
}





test_host() {
  _test_nb_args "1" "$@"
  LIST="$1"

  for i in ${LIST[*]}; do
    if [ "$i" == "$(hostname -s)" ]; then
      TEST_HOST="true"
    fi
  done

  term "Test du nom machine" '[ $TEST_HOST == true ]'
}



clean_exit_force() {
  if [ ! -z $1 ]; then
    _test_nb_args "1" "$@"
    CLEAR_LOG="$1"
  else
    menu "no" "Voulez-vous detruire le fichier :\n\t$LOG_FILE"
    CLEAR_LOG=$MENU_RESULT
  fi

  log_off

  if [ "$CLEAR_LOG" == "yes" ]; then
    echo "Suppression de $LOG_FILE"
    rm $LOG_FILE
  fi
}




mod_root() {
  simple "Le script doit etre lance en root!"
  if [ "$(id -u)" != "0" ]; then
    clean_exit_force "yes"
    clear
    sudo $REP_SCR/$FILE_SCR $OPTIONS
    exit 1
  else
    simple "Mode root active!"
  fi
}



copy() {
  _test_nb_args "2" "$@"
  cp -rp $1 $2 & _bar "taille" "$1" "$2"
}



test_os() {
  for i in ${OS_LIST[*]}; do
    _test_osfile $i
  done

  if [ -z $OS ]; then
    menu "yes" "Choisir manuellement une distribution ?"
    if [ "$MENU_RESULT" == "yes" ]; then
      menu "list" "Choisir un OS :" "${OS_LIST[*]}"
    else
      simple "Arret du script"
    fi
  fi

# Les deux lignes qui suivent sont a supprimer
log_off
echo $OS
}









######################
### FONCTIONS INTERNES

_bar() {
  BAR_PROG=0

  while
  log_off
  TAILLE_A=$(ls -l $2 | cut -d " " -f5)
  TAILLE_B=$(ls -l $3/$(basename $2) | cut -d " " -f5)
  PROGRESS=$(($TAILLE_B * 100 / $TAILLE_A))

  echo -ne "Copie ${MOVE_TO_COL} [ \\033[0;33m $BAR_PROG \\033[0;39m ]\r"

  do
    if [ $BAR_PROG -lt 100 ]; then
      BAR_PROG=$PROGRESS
    else
      break
    fi
  done
  #echo -ne '\n'
  echo "c est fini"
}



#_test_osfile_old() {
#  if [ -z $OS ]; then
#    if [ $(uname -r | grep -i $1) ]; then
#      OS=$1
#    elif [ -e /etc/os-release ] && [ -e /etc/arch-release ] && [ $(cat /etc/arch-release | grep -i $1) ]; then
#      OS=$1
#    elif [ -e /etc/dpkg/origins/ubuntu ]; then
#      OS="ubuntu"
#    elif [ -e /etc/linuxmint/info ] && [ -e /etc/debian_version ]; then
#      OS="lmde"
#    elif [ -e /etc/os-release ] && [ -e /etc/debian_version ]; then
#      OS="debian"
#    elif [ -e /etc/redhat-release ] && [ $(cat /etc/redhat-release | grep -i $1) ]; then
#      OS=$1
#    fi
#  fi
#}



#_test_osfile_old() {
## sed -n '/^NAME=/p' $i      Recupération de la ligne commancant par NAME= dans $i
## sed -e 's/NAME=//'         Afficher sans NAME=
## -e 's/\"//g'               Afficher sans les guillemets
## -e 's/\(.*\)/\L\1/g'       Afficher en minuscule
#
#  for i in ${FILE_OSLIST[*]}; do
#    if [ -f $i ] && [ "$i" == "lsb-release" ]; then
#      OS=$(sed -n '/^DISTRIB_ID=/p' $i | sed -e 's/DISTRIB_ID=//' -e 's/\(.*\)/\L\1/g')
#    elif [ -f $i ]; then
#      OS=$(sed -n '/^NAME=/p' $i | sed -e 's/NAME=//' -e 's/\"//g' -e 's/\(.*\)/\L\1/g')
#    fi
#  done
#}



_test_osfile() {
# sed -n '/^NAME=/p' $i      Recupération de la ligne commancant par NAME= dans $i
# sed -e 's/NAME=//'         Afficher sans NAME=
# -e 's/\"//g'               Afficher sans les guillemets
# -e 's/\(.*\)/\L\1/g'       Afficher en minuscule

  # Si facter est instale
  if [ ! -z $(which facter) ]; then
    OS=$($(which facter) operatingsystem | sed -e 's/\(.*\)/\L\1/g')
  fi

  for i in ${FILE_OSLIST[*]}; do
    if [ -f $i ] && [ -z $OS ]; then
      for l in ${LINE_OSID[*]}; do
        OS=$(sed -n '/'$l'/p' $i | sed -e 's/'$l'//' -e 's/\"//g' -e 's/\(.*\)/\L\1/g')
      done
    fi
  done
}








